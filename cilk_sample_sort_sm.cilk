#include<cilk.h>
#include<stdio.h>
#include<iostream>
#include<limits.h>
#include<algorithm>
//#include<cilk.h>
//#include<cilkview.h>
#include<math.h>
#include<stdint.h>
using namespace std;


unsigned long long int num, m1=64;

void print_array(double A[])
{
        for(unsigned long long int i=0 ; i<num; i++ )
        {
                cout << A[i] << "\t";
        }
        cout <<endl;
}

void insertion_sort(double A[], unsigned long long int p, unsigned long long int r) {
        for(unsigned long long int i=p+1; i<=r; i++) {
                double key = A[i];
                unsigned long long int j  = i-1;

                while(j >= p && A[j] > key) {
                        A[j+1] = A[j];
                        j = j-1;
                }
                A[j+1] = key;
        }
}


void merge(double A[], unsigned long long int p, unsigned long long int q, unsigned long long int r) {
        unsigned long long int n1 = q-p+1, n2 = r-q;
        double *L = new double[n1+1];
        double *R = new double[n2+1];

        unsigned long long int i, j = 0;
        for(i=0; i<n1; i++) {
                L[i] =  A[p+i];
        }
        L[i] = INT_MAX;

        j = 0;
        for(i=0; i<n2; i++) {
                R[i] =  A[q+1+i];
        }
        R[i] = INT_MAX;

        i=0, j=0;
        for(unsigned long long int k=p; k<=r; k++) {
                if (L[i] <= R[j]) {
                        A[k] = L[i];
 	                i++;
                }
                else {
                        A[k] = R[j];
                        j++;
                }
        }
        delete[] L;
        delete[] R;
}



void parallel_merge_sort(double A[], unsigned long long int p, unsigned long long int r) {
        unsigned long long int n = r-p+1;
        unsigned long long int q;
        if(n <= m1)
                insertion_sort(A, p, r);
        else {
                q = (unsigned long long int)floor((p+r)/2);

                //cilk_spawn
                parallel_merge_sort(A, p, q);
                parallel_merge_sort(A, q+1, r);
                //cilk_sync;

                merge(A, p, q, r);
        }
}


extern "C++" int cilk_sm_sort( double A[],uint64_t n, uint64_t r )
{
return cilk::run( parallel_merge_sort,A, n, r );
}
