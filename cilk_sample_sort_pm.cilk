#include<iostream>
#include<algorithm>
#include<cilk.h>
#include<cilkview.h>
#include<math.h>
#include<stdint.h>
using namespace std;

int num, m2 = 4096, m3 = 64;

void print_array(double A[]) {
    for (int i = 0 ; i < num; i++ )
    {
        cout << A[i] << "  " ;
    }
    cout << endl << endl;
}

void insertion_sort(double A[], int p, int r) {
    for (int i = p + 1; i <= r; i++) {
        double key = A[i];
        int j  = i - 1;

        while (j >= p && A[j] > key) {
            A[j + 1] = A[j];
            j = j - 1;
        }
        A[j + 1] = key;
    }
}

void serial_merge(double T[], int p1, int r1, int p2, int r2, double A[], int p3, int r3) {
    int n1 = r1 - p1 + 1, n2 = r2 - p2 + 1;
    double *L = new double[n1 + 1];
    double *R = new double[n2 + 1];
    int i, j = 0;

    for (i = 0; i < n1; i++) {
        L[i] =  T[p1 + i];
    }
    L[i] = INT_MAX;

    for (i = 0; i < n2; i++) {
        R[i] =  T[p2 + i];
    }
    R[i] = INT_MAX;

    i = 0, j = 0;
    for (int k = p3; k <= r3; k++) {
        if (L[i] <= R[j]) {
            A[k] = L[i];
            i++;
        }
        else {
            A[k] = R[j];
            j++;
        }
    }

    delete[] L;
    delete[] R;
}

int binary_search(double key, double T[], int left, int right) {
    int low = left;
    int high = max(left, right + 1);
    while (low < high) {
        int mid = low + (high - low) / 2;

        if (T[mid] <= key && T[mid + 1] > key)
            return mid + 1;

        if (T[mid] > key)
            high = mid;
        else
            low = mid + 1;
    }
    return high;
}

void exchange(int *x, int *y) {
    int temp = *x;
    *x = *y;
    *y = temp;
}

void parallel_merge(double T[], int p1, int r1, int p2, int r2, double A[], int p3) {
    int n1 = r1 - p1 + 1, n2 = r2 - p2 + 1, r3 = p3 + n1 + n2 - 1;
    if (n1 + n2 <= m2) {
        serial_merge(T, p1, r1, p2, r2, A, p3, r3);
    } else {
        if (n1 < n2) {
            exchange(&p1, &p2);
            exchange(&r1, &r2);
            exchange(&n1, &n2);
        }

        int q1 = floor((p1 + r1) / 2);
        int q2 = binary_search(T[q1], T, p2, r2);
        int q3 = p3 + (q1 - p1) + (q2 - p2);

        A[q3] = T[q1];

        cilk_spawn parallel_merge(T, p1, q1 - 1, p2, q2 - 1, A, p3);
        parallel_merge(T, q1 + 1, r1, q2, r2, A, q3 + 1);
        cilk_sync;
    }
}

void parallel_merge_sort(double T[], double A[], int p, int r) {
    int n = r - p + 1;
    int q;

    if (n <= m3) {
        insertion_sort(A, p, r);
    }
    else {
        q = floor((p + r) / 2);

        cilk_spawn parallel_merge_sort(T, A, p, q);
        parallel_merge_sort(T, A, q + 1, r);
        cilk_sync;

        for (int i = p; i <= r; i++)
        {
            T[i] = A[i];
        }
        parallel_merge(T, p, q, q + 1, r, A, p);
    }
}


extern "C++" void cilk_pm_sort(double T[], double A[], int n, int r )
{
    cilk::run( parallel_merge_sort, T, A, n, r );
}
